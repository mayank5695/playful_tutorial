# In this tutorial, we will learn how to apply the
# keywords learned in the previous tutorials to setup
# more advanced applications, such as an emotional robot.

# Imagine you control a robot with LEDS allowing
# it to make facial expressions. You work on an emotional robot, and
# you want the robot to display the facial expression that corresponds
# to its mood, e.g. smile when happy.
# This tutorial implements this.

# The code for this trivial robot is in:
# ../../py/robot.py

# In this simple tutorial, the mood of the robot is follow a trivial model:
# it just alternates between 'happy', 'not caring'
# and 'amused'. But nothing would stop
# you to implement something (much more) fancy.

# The "cognitive" leaf node (mood_manager) set the "mood" of the robot.
# See code of the mood_manager in ../../py/tutorial_play.py
# (cognitive is a big word, but you get the idea. In real applicationds, 
# developpers are likely to create much more interesting mechanisms to 
# manage the mood of the robot)

# Leaf nodes changing the facial expression of the robot
# are activated based on the current mood.
# See code of smile, stay_put and laugh is also in ../../py/tutorial_play.py

# Below, there are 3 versions of the program, which are equivalent but
# uses various strategies. Comment / uncomment code below
# to try them all

# Note: in ../../config there are on_start.py and on_stop.py which are
#       called when playful scripts starts, allowing to initialize robots
#       and stop robots cleanly. Any arbitrary python code may be used in
#       on_start.py and on_stop.py files

program:

	# control the mood of the program, always running
	mood_manager

	# display the robot (the emoticon) in the terminal, always running
	display_robot	

	# changing the facial expression of the robot

        # example 1 : based on ''while'' keyword

	smile, while is_happy
	stay_put, while do_not_care
	laugh, while is_amused

	# example 2 : based on priority
	# note: 'priority of 2 if is_happy, priority of -1'
	# can be read: 'priority of 2 if is_happy, else priority of -1'

	#smile, priority of 2 if is_happy, priority of -1
	#stay_put, priority of 2 if do_not_care, priority of -1
	#laugh, priority of 2 if is_amused, priority of -1

	# example 3 : good old state machine

	#smile, switch to stay_put if do_not_care, switch to laugh if is_amused
	#stay_put, switch to smile if is_happy, switch to laugh if is_amused
	#laugh, switch to smile if is_happy, switch to stay_put if do_not_care	